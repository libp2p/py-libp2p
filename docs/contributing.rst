Contributing
------------

Development
~~~~~~~~~~~

To get started, fork the repository to your own github account, then clone it to your
development machine:

.. code:: sh

    git clone git@github.com:your-github-username/py-libp2p.git


then install the development dependencies. We recommend using a virtual environment,
such as `virtualenv <https://virtualenv.pypa.io/en/stable/>`_.

.. code:: sh

    cd py-libp2p
    virtualenv -p python venv
    . venv/bin/activate
    python -m pip install -e ".[dev]"
    pre-commit install


Dependencies
^^^^^^^^^^^^

On Debian Linux you will need to ensure that you have the
`GNU Multiprecision Arithmetic Library <https://gmplib.org/>`_
installed since it is a dependency of the fastecdsa package. You can install it using
the following command:

.. code:: sh

    sudo apt-get install libgmp-dev


Requirements
^^^^^^^^^^^^

The protobuf description in this repository was generated by ``protoc`` at version
``25.3``.

Testing
~~~~~~~

Running that tests is a great way to explore the codebase.

You can run all the tests with ``pytest tests``.

At this time, the interop tests are not passing. You can run just the internal tests
with ``pytest tests/core``.


Code Style
~~~~~~~~~~

We use `pre-commit <https://pre-commit.com/>`_ to maintain consistent code style. Once
installed, it will run automatically with every commit. You can also run it manually
with:

.. code:: sh

    make lint

If you need to make a commit that skips the pre-commit checks, you can do so with
``git commit --no-verify``.

This project uses ``mypy`` for static type checking, though it is not yet complete.
All new code should be fully typed, and we are working to add types to the existing
codebase.

Releasing
~~~~~~~~~

Releases are typically done from the ``main`` branch, except when releasing a beta (in
which case the beta is released from ``main``, and the previous stable branch is
released from said branch).

Final test before each release
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Before releasing a new version, build and test the package that will be released:

.. code:: sh

    git checkout main && git pull

    make package-test


This will build the package and install it in a temporary virtual environment. Follow
the instructions to activate the venv and test whatever you think is important.

You can also preview the release notes:

.. code:: sh

    towncrier --draft


Build the release notes
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Before bumping the version number, build the release notes. You must include the part of
the version to bump (see below), which changes how the version number will show in the
release notes.

.. code:: sh

    make notes bump=$$VERSION_PART_TO_BUMP$$


If there are any errors, be sure to re-run make notes until it works.

Push the release to github & pypi
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

After confirming that the release package looks okay, release a new version:

.. code:: sh

    make release bump=$$VERSION_PART_TO_BUMP$$


This command will:

- Bump the version number as specified in ``.pyproject.toml`` and ``setup.py``.
- Create a git commit and tag for the new version.
- Build the package.
- Push the commit and tag to github.
- Push the new package files to pypi.

Which version part to bump
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``$$VERSION_PART_TO_BUMP$$`` must be one of: ``major``, ``minor``, ``patch``, ``stage``,
or ``devnum``.

The version format for this repo is ``{major}.{minor}.{patch}`` for stable, and
``{major}.{minor}.{patch}-{stage}.{devnum}`` for unstable (``stage`` can be alpha or
beta).

If you are in a beta version, ``make release bump=stage`` will switch to a stable.

To issue an unstable version when the current version is stable, specify the new version
explicitly, like ``make release bump="--new-version 4.0.0-alpha.1"``

You can see what the result of bumping any particular version part would be with
``bump-my-version show-bump``
