# Prometheus configuration for Python libp2p WebSocket Transport
# Based on patterns from js-libp2p and go-libp2p implementations

global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    cluster: 'libp2p-production'
    environment: 'production'

rule_files:
  - "libp2p_rules.yml"

scrape_configs:
  # libp2p WebSocket service metrics
  - job_name: 'libp2p-websocket'
    static_configs:
      - targets: ['libp2p-websocket:9090']
    scrape_interval: 10s
    metrics_path: '/metrics'
    scheme: 'http'
    
  # Redis metrics (if redis_exporter is available)
  - job_name: 'redis'
    static_configs:
      - targets: ['redis:6379']
    scrape_interval: 30s
    
  # Node exporter for system metrics
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']
    scrape_interval: 30s
    
  # Nginx metrics (if nginx-prometheus-exporter is available)
  - job_name: 'nginx'
    static_configs:
      - targets: ['nginx:9113']
    scrape_interval: 30s

# Alerting rules
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

# Recording rules for aggregated metrics
recording_rules:
  - name: libp2p_recording_rules
    rules:
      - record: libp2p:connections_rate
        expr: rate(libp2p_connections_total[5m])
      - record: libp2p:messages_rate
        expr: rate(libp2p_messages_sent_total[5m])
      - record: libp2p:uptime_hours
        expr: libp2p_uptime_seconds / 3600
