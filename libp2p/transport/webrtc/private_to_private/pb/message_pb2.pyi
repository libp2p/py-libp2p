"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class Message(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Type:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _TypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Message._Type.ValueType], builtins.type):  # noqa: F821
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        SDP_OFFER: Message._Type.ValueType  # 0
        """String of `RTCSessionDescription.sdp`"""
        SDP_ANSWER: Message._Type.ValueType  # 1
        """String of `RTCSessionDescription.sdp`"""
        ICE_CANDIDATE: Message._Type.ValueType  # 2
        """String of `RTCIceCandidate.toJSON()`"""

    class Type(_Type, metaclass=_TypeEnumTypeWrapper):
        """Specifies type in `data` field."""

    SDP_OFFER: Message.Type.ValueType  # 0
    """String of `RTCSessionDescription.sdp`"""
    SDP_ANSWER: Message.Type.ValueType  # 1
    """String of `RTCSessionDescription.sdp`"""
    ICE_CANDIDATE: Message.Type.ValueType  # 2
    """String of `RTCIceCandidate.toJSON()`"""

    TYPE_FIELD_NUMBER: builtins.int
    DATA_FIELD_NUMBER: builtins.int
    type: global___Message.Type.ValueType
    data: builtins.str
    def __init__(
        self,
        *,
        type: global___Message.Type.ValueType | None = ...,
        data: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_data", b"_data", "_type", b"_type", "data", b"data", "type", b"type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_data", b"_data", "_type", b"_type", "data", b"data", "type", b"type"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_data", b"_data"]) -> typing_extensions.Literal["data"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_type", b"_type"]) -> typing_extensions.Literal["type"] | None: ...

global___Message = Message
