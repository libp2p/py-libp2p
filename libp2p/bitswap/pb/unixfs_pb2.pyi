"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Data(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _DataType:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _DataTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Data._DataType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        Raw: Data._DataType.ValueType  # 0
        Directory: Data._DataType.ValueType  # 1
        File: Data._DataType.ValueType  # 2
        Metadata: Data._DataType.ValueType  # 3
        Symlink: Data._DataType.ValueType  # 4
        HAMTShard: Data._DataType.ValueType  # 5

    class DataType(_DataType, metaclass=_DataTypeEnumTypeWrapper): ...
    Raw: Data.DataType.ValueType  # 0
    Directory: Data.DataType.ValueType  # 1
    File: Data.DataType.ValueType  # 2
    Metadata: Data.DataType.ValueType  # 3
    Symlink: Data.DataType.ValueType  # 4
    HAMTShard: Data.DataType.ValueType  # 5

    TYPE_FIELD_NUMBER: builtins.int
    DATA_FIELD_NUMBER: builtins.int
    FILESIZE_FIELD_NUMBER: builtins.int
    BLOCKSIZES_FIELD_NUMBER: builtins.int
    HASHTYPE_FIELD_NUMBER: builtins.int
    FANOUT_FIELD_NUMBER: builtins.int
    MODE_FIELD_NUMBER: builtins.int
    MTIME_FIELD_NUMBER: builtins.int
    Type: global___Data.DataType.ValueType
    Data: builtins.bytes
    filesize: builtins.int
    hashType: builtins.int
    fanout: builtins.int
    mode: builtins.int
    @property
    def blocksizes(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
    @property
    def mtime(self) -> global___IPFSTimestamp: ...
    def __init__(
        self,
        *,
        Type: global___Data.DataType.ValueType | None = ...,
        Data: builtins.bytes | None = ...,
        filesize: builtins.int | None = ...,
        blocksizes: collections.abc.Iterable[builtins.int] | None = ...,
        hashType: builtins.int | None = ...,
        fanout: builtins.int | None = ...,
        mode: builtins.int | None = ...,
        mtime: global___IPFSTimestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["Data", b"Data", "Type", b"Type", "fanout", b"fanout", "filesize", b"filesize", "hashType", b"hashType", "mode", b"mode", "mtime", b"mtime"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["Data", b"Data", "Type", b"Type", "blocksizes", b"blocksizes", "fanout", b"fanout", "filesize", b"filesize", "hashType", b"hashType", "mode", b"mode", "mtime", b"mtime"]) -> None: ...

global___Data = Data

@typing.final
class Metadata(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MIMETYPE_FIELD_NUMBER: builtins.int
    MimeType: builtins.str
    def __init__(
        self,
        *,
        MimeType: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["MimeType", b"MimeType"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["MimeType", b"MimeType"]) -> None: ...

global___Metadata = Metadata

@typing.final
class IPFSTimestamp(google.protobuf.message.Message):
    """IPFSTimestamp represents a timestamp in IPFS"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SECONDS_FIELD_NUMBER: builtins.int
    NANOS_FIELD_NUMBER: builtins.int
    seconds: builtins.int
    """Represents seconds of UTC time since Unix epoch
    1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
    9999-12-31T23:59:59Z inclusive.
    """
    nanos: builtins.int
    """Non-negative fractions of a second at nanosecond resolution. Negative
    second values with fractions must still have non-negative nanos values
    that count forward in time. Must be from 0 to 999,999,999
    inclusive.
    """
    def __init__(
        self,
        *,
        seconds: builtins.int | None = ...,
        nanos: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["nanos", b"nanos", "seconds", b"seconds"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["nanos", b"nanos", "seconds", b"seconds"]) -> None: ...

global___IPFSTimestamp = IPFSTimestamp
